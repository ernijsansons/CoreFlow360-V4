# Docker Compose for Future Enterprise Design System
# Local development and testing environment

version: '3.8'

networks:
  design-system:
    driver: bridge

volumes:
  node_modules:
    driver: local
  pnpm_store:
    driver: local

services:
  # ============================================================================
  # Development Server - Hot reload enabled
  # ============================================================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-dev
    ports:
      - "5173:5173"     # Vite dev server
      - "9229:9229"     # Node.js debugger
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - pnpm_store:/root/.local/share/pnpm/store
    environment:
      - NODE_ENV=development
      - VITE_PORT=5173
      - DEBUG=*
    networks:
      - design-system
    command: pnpm dev

  # ============================================================================
  # Storybook - Component documentation
  # ============================================================================
  storybook:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-storybook
    ports:
      - "6006:6006"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - design-system
    command: pnpm storybook

  # ============================================================================
  # Playground - Interactive testing environment
  # ============================================================================
  playground:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-playground
    ports:
      - "5174:5174"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_PORT=5174
    networks:
      - design-system
    command: pnpm playground

  # ============================================================================
  # Production Build Test
  # ============================================================================
  prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: design-system-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - design-system
    profiles:
      - production

  # ============================================================================
  # Nginx Static Server
  # ============================================================================
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
      target: nginx
    container_name: design-system-nginx
    ports:
      - "8080:80"
    networks:
      - design-system
    profiles:
      - static

  # ============================================================================
  # Test Runner
  # ============================================================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: design-system-test
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=test
      - CI=true
    networks:
      - design-system
    profiles:
      - test

  # ============================================================================
  # Cloudflare Workers Local Development
  # ============================================================================
  workers:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-workers
    ports:
      - "8787:8787"     # Wrangler dev server
      - "9230:9229"     # Debugger port
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
    networks:
      - design-system
    command: pnpm wrangler dev --port 8787 --inspector-port 9229
    profiles:
      - workers

  # ============================================================================
  # Figma MCP Server
  # ============================================================================
  mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-mcp
    ports:
      - "3845:3845"     # MCP server port
    volumes:
      - .:/app
      - ./mcp-templates:/app/mcp-templates
    environment:
      - NODE_ENV=development
      - MCP_PORT=3845
      - FIGMA_TOKEN=${FIGMA_TOKEN}
      - FIGMA_FILE_ID=${FIGMA_FILE_ID}
    networks:
      - design-system
    command: pnpm mcp:start
    profiles:
      - mcp

  # ============================================================================
  # Visual Regression Testing with Percy
  # ============================================================================
  percy:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: design-system-percy
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - PERCY_TOKEN=${PERCY_TOKEN}
      - CI=true
    networks:
      - design-system
    command: pnpm test:visual
    profiles:
      - visual

  # ============================================================================
  # Bundle Analyzer
  # ============================================================================
  analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: design-system-analyzer
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=production
    networks:
      - design-system
    command: pnpm bundle:analyze
    profiles:
      - analyze

# ============================================================================
# Usage Instructions:
# ============================================================================
# Development:
#   docker-compose up dev storybook playground
#
# Production test:
#   docker-compose --profile production up
#
# Run tests:
#   docker-compose --profile test up
#
# Cloudflare Workers:
#   docker-compose --profile workers up
#
# Visual regression:
#   docker-compose --profile visual up
#
# Bundle analysis:
#   docker-compose --profile analyze up
#
# Full stack (all services):
#   docker-compose --profile "*" up