name: Docker + Cloudflare Deployment Pipeline

on:
  push:
    branches: [main, develop, comprehensive-testing]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Security and Quality Checks
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          chmod +x scripts/security-scan.sh
          ./scripts/security-scan.sh

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-scan-results/

  # ============================================================================
  # Docker Build and Test
  # ============================================================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # ============================================================================
  # Docker Compose Test
  # ============================================================================
  docker-test:
    name: Test Docker Stack
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create test environment file
        run: |
          cp env.example .env
          # Generate cryptographically secure secrets for testing
          echo "POSTGRES_PASSWORD=$(openssl rand -base64 32)" >> .env
          echo "REDIS_PASSWORD=$(openssl rand -base64 32)" >> .env
          echo "JWT_SECRET=$(openssl rand -base64 64)" >> .env
          echo "ENCRYPTION_KEY=$(openssl rand -base64 32)" >> .env
          echo "ANTHROPIC_API_KEY=test_anthropic_key_$(openssl rand -hex 16)" >> .env
          echo "OPENAI_API_KEY=test_openai_key_$(openssl rand -hex 16)" >> .env

      - name: Start test stack
        run: |
          docker-compose up -d postgres redis
          sleep 30
          docker-compose exec postgres pg_isready -U coreflow -d coreflow360
          docker-compose exec redis redis-cli ping

      - name: Test monitoring stack
        run: |
          docker-compose up -d prometheus grafana
          sleep 20
          curl -f http://localhost:9090/-/healthy || exit 1

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # ============================================================================
  # Cloudflare Workers Deployment
  # ============================================================================
  cloudflare-deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/comprehensive-testing'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env ${{ github.event.inputs.environment || 'staging' }}

      - name: Run database migrations
        run: |
          npx wrangler d1 migrations apply coreflow360-agents --env ${{ github.event.inputs.environment || 'staging' }}

  # ============================================================================
  # Docker Registry Deployment
  # ============================================================================
  docker-deploy:
    name: Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production registry
        run: |
          echo "Deploying Docker images to production registry"
          echo "Image: ${{ needs.docker-build.outputs.image-digest }}"
          
      - name: Update production deployment
        run: |
          echo "Updating production Docker Compose deployment"
          # This would typically update a production server or Kubernetes cluster

  # ============================================================================
  # Notification and Cleanup
  # ============================================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [cloudflare-deploy, docker-deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.cloudflare-deploy.result == 'success' && needs.docker-deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Cloudflare Workers: https://coreflow360-v4.workers.dev"
          echo "üê≥ Docker Images: ghcr.io/${{ github.repository }}"

      - name: Notify failure
        if: needs.cloudflare-deploy.result == 'failure' || needs.docker-deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details"
