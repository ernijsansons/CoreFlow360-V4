name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Check formatting
        run: npx prettier --check .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_DATABASE_URL: ':memory:'

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm run frontend:install

      - name: Run frontend tests
        run: npm run frontend:test

      - name: Build frontend
        run: npm run frontend:build

  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate migration scripts
        run: |
          npm run migrations:validate
          npm run migrations:dry-run

  build-artifacts:
    name: Build and Package Artifacts
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend, test-frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create deployment artifacts
        run: |
          mkdir -p artifacts
          cp -r dist artifacts/
          cp wrangler.toml artifacts/
          cp package.json artifacts/
          tar -czf artifacts.tar.gz artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: artifacts.tar.gz
          retention-days: 30

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.sha }}
          path: performance-results.json

  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y

  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Wrangler config
        run: npx wrangler --version && npx wrangler config validate

      - name: Validate environment configurations
        run: npm run config:validate

  all-checks-passed:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs:
      - lint-and-typecheck
      - security-scan
      - test-backend
      - test-frontend
      - validate-migrations
      - build-artifacts
      - accessibility-test
      - validate-config
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" &&
                "${{ needs.security-scan.result }}" == "success" &&
                "${{ needs.test-backend.result }}" == "success" &&
                "${{ needs.test-frontend.result }}" == "success" &&
                "${{ needs.validate-migrations.result }}" == "success" &&
                "${{ needs.build-artifacts.result }}" == "success" &&
                "${{ needs.accessibility-test.result }}" == "success" &&
                "${{ needs.validate-config.result }}" == "success" ]]; then
            echo "All CI checks passed successfully!"
          else
            echo "One or more CI checks failed"
            exit 1
          fi

      - name: Post success notification
        if: success()
        run: |
          echo "âœ… All CI checks passed for commit ${{ github.sha }}"